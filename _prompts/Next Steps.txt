I have a project called LogicStudio.ai. It is a Vue.js CDN based app which runs on a Node.js server. 
The project uses these plugins and versions
<script src="https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue-router@4.2.3/dist/vue-router.global.js">
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js">
<script src="https://unpkg.com/primevue/umd/primevue.min.js"></script> 
<script src="https://unpkg.com/@primevue/themes/umd/aura.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/primeicons@4.0.0/primeicons.css" />
<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/uuid/8.2.0/uuidv4.min.js"></script>
<script type="module" src="https://cdnjs.cloudflare.com/ajax/libs/json5/2.2.3/index.min.js"></script>
<script src="https://cdn.socket.io/4.8.1/socket.io.min.js" crossorigin="anonymous"></script>
Because I am using the CDN version, there is never a need to import these libraries into my components, they are all global.
This includes the PrimeVue components, which are registered in main.js already
Further, because of the CDN value, all Vue functions need to be prefixed liked Vue.ref instead of just ref. Vue never needs to be imported into components either.
For reactivity, I strongly prefer ref over reactive variables for consistency between components and projects.
The main component we are working with is called AgentCanvas.js which allows us to use various 'card' components which are drag and drop compatible 
interface features. These cards are linked together by connections, which connect card 'sockets' to each other. The cards array contain all the cards, and each card type has a different function (file input in InputCard.js, file output in OutputCard.js, LLM-enabled Agent interactions in the AgentCard.js). More cards will be added iteratively.
I am working on the AgentCanvas to make all the card types work. RIght now I am working through the core features (adding removing cards, making them movable, handling their z-index based on selection. It handles all the events from these cards, and updates the data for cards and connections, as well as updates and draws the spines and links. It handles both the mouse interactions and touch interactions.
Ensure that as we make these changes there is NO regression in capabilities, such as omitting elements of a function or a template component. When you provide the code, ensure that the segment you provide is complete for easy integration. Or if I just need a smaller piece, I will let you know.
When building new components, follow the same template / format of the components I am giving you. This is working very well for me, so don't use any Vue syntax with Options API or <script setup> which requires a builder. The files we are creating are .js files. We can make composables in this version of Vue.js with CDN, so ask if you need an example of how to do this properly.
There are a few things I need help with.

I am attempting a full refactor of the main component and AgentCanvas.js and one composable called useSockets.js which was having a lot of inconsistency problems. I am attempting to port all the functionality out of these two into a new useCanvases.js and a new AgentCanvas3.js component. I want useCanvases.js to maintain the full state of canvases, cards, connections, and sockets while AgentCanvas3.js maintains just the stuff I need to handle the Cards and card events like AgentCard, InputCard, OutputCard, etc. 

I've broken then down the original functionality into a library of distinct utils components to make things easier to manage, and created a new useCanvases.js which imports and utilizes all these functions. I also have an initial AgentCanvas3.js which I want to begin to repopulate.

here are the utils functions

utils/canvasInteraction/

mouseEvents.js - Mouse interaction handling
touchEvents.js - Touch interaction handling
zoomPan.js - Zoom and pan functionality
connectionDrawing.js - Spline drawing and connection visualization
pointCalculation.js - Point/coordinate calculations and transformations


utils/socketManagement/

socketRegistry.js - Socket registration and tracking
socketConnections.js - Connection validation and management
socketValues.js - Value propagation and updates


utils/cardManagement/

cardPositioning.js - Card position updates and drag handling
cardSelection.js - Selection state and z-index management
cardRegistry.js - Card creation and removal


utils/canvasState/

canvasRegistry.js - Canvas creation and management
exportImport.js - JSON/PNG export/import functionality


I need your help in incorporating all the utils functions accurately into the useCanvases.js and the AgentCanvas3.js to bring back the original functionality.

I am beginning by building back the basic functionality. I have the toolbar, the grid, and the background working.

I'd like to move the zoomIn and zoomOut from AgentCanvas3. into the zoomPan.js functionality to work properly there, and them import them through useCanvases.js.
I've incorporated the pinch to zoom and the swipe with the trackpad to move, but the clicking on the background to pan doesn't work, which we need to reincorporate.
The touch swipe to pan works on mobile, but the pinch to zoom doesn't work here very well. It zooms a little, bit is jittery and only changes a couple of percentage points on the zoom.

Once we get these features working, we will begin to reintroduce the next components, like adding cards and building connections.


